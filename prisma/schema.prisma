// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password         String?
  accounts      Account[]
  sessions      Session[]
}


 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Avatar {
  id   String @id
  url  String
}

model BodyType {
  id            Int             @id @default(autoincrement())
  type          String          @unique
  avatarNumbers AvatarNumber[]  // 1:N 관계
}

model AvatarNumber {
  id          Int      @id @default(autoincrement())
  name        String   // 나무늘보, 펭귄 등 이름
  numbers     Int[]    // 숫자 배열
  bodyTypeId  Int      // BodyType와 연결
  bodyType    BodyType @relation(fields: [bodyTypeId], references: [id])
}

model ResultText {
  id           Int          @id @default(autoincrement())
  type         String       @unique
  summary      String       // 요약 정보
  stylingTips  StylingTip?  @relation(fields: [stylingTipId], references: [id])
  stylingTipId Int?
}

model StylingTip {
  id          Int        @id @default(autoincrement())
  description String
  tips        Tip[]      // 여러 개의 Tip과 연결
  resultText  ResultText[]
}

model Tip {
  id             Int          @id @default(autoincrement())
  category       String       // 예: 자켓, 티셔츠
  description    String       // 설명
  stylingTipId   Int          // StylingTip과 연결
  stylingTip     StylingTip   @relation(fields: [stylingTipId], references: [id])
}
